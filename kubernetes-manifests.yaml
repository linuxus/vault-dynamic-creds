apiVersion: v1
kind: Namespace
metadata:
  name: acme-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: acme-demo-sa
  namespace: acme-demo
---
# Role for the service account to read secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: acme-demo
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
---
# RoleBinding to associate the Role with the ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-secrets
  namespace: acme-demo
subjects:
- kind: ServiceAccount
  name: acme-demo-sa
  namespace: acme-demo
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
# VaultAuth configuration for Kubernetes authentication
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: default
  namespace: acme-demo
spec:
  method: kubernetes
  mount: kubernetes
  kubernetes:
    role: acme-demo-role
    serviceAccount: acme-demo-sa
---
# VaultDynamicSecret to fetch database credentials
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultDynamicSecret
metadata:
  name: postgres-creds
  namespace: acme-demo
spec:
  vaultAuthRef: default
  mount: database  
  path: creds/acme-demo-role
  destination:
    name: postgres
    create: true
  rolloutRestartTargets:
  - kind: Deployment
    name: acme-demo
  renewalPercent: 75  # Renew when 75% of TTL is passed
  revoke: true        # Revoke credentials when resource is deleted
---
# ConfigMap for the application code
apiVersion: v1
kind: ConfigMap
metadata:
  name: acme-demo-code
  namespace: acme-demo
data:
  app.py: |
    import os
    import time
    import streamlit as st
    import psycopg2
    from datetime import datetime

    st.set_page_config(
        page_title="Vault Dynamic Secrets Demo",
        page_icon="üîê",
        layout="wide"
    )

    # App title and description
    st.title("üîê Vault Dynamic Secrets PostgreSQL Demo")
    st.markdown("""
    This application demonstrates using HashiCorp Vault's dynamic secrets for PostgreSQL database access.
    The credentials are automatically rotated by Vault Secret Operator and injected as Kubernetes secrets.
    """)

    # Function to get database connection
    def get_connection():
        """Get a PostgreSQL connection using credentials from environment variables"""
        try:
            username = os.environ.get('POSTGRES_USERNAME')
            password = os.environ.get('POSTGRES_PASSWORD')
            host = os.environ.get('POSTGRES_HOST', 'postgres-postgresql.postgres.svc.cluster.local')
            port = os.environ.get('POSTGRES_PORT', '5432')
            dbname = os.environ.get('POSTGRES_DB', 'acme-demo')
            
            # Display connection info (excluding password)
            st.sidebar.subheader("Connection Details")
            st.sidebar.info(f"""
            **Host**: {host}
            **Port**: {port}
            **Database**: {dbname}
            **Username**: {username}
            """)
            
            # Connect to the database
            conn_string = f"postgresql://{username}:{password}@{host}:{port}/{dbname}"
            conn = psycopg2.connect(conn_string)
            return conn, None
            
        except Exception as e:
            return None, str(e)

    # Main content area with tabs
    tab1, tab2 = st.tabs(["Connection Test", "Credential Monitor"])

    with tab1:
        st.header("Test Database Connection")
        
        if st.button("Connect to PostgreSQL", key="connect_btn"):
            with st.spinner("Connecting to PostgreSQL..."):
                conn, error = get_connection()
                
                if conn:
                    st.success("‚úÖ Successfully connected to PostgreSQL database!")
                    
                    # Show connection details
                    col1, col2 = st.columns(2)
                    
                    # Get PostgreSQL version
                    cur = conn.cursor()
                    cur.execute("SELECT version();")
                    version = cur.fetchone()[0]
                    col1.metric("PostgreSQL Version", version.split(",")[0])
                    
                    # Display current user
                    cur.execute("SELECT current_user;")
                    user = cur.fetchone()[0]
                    col1.metric("Connected User", user)
                    
                    # Show when credentials will expire
                    cur.execute("SELECT rolvaliduntil FROM pg_roles WHERE rolname = current_user;")
                    expiry_result = cur.fetchone()
                    
                    if expiry_result and expiry_result[0]:
                        expiry = expiry_result[0]
                        col2.metric("Credentials Expire At", expiry.strftime("%Y-%m-%d %H:%M:%S"))
                        
                        # Calculate time remaining
                        now = datetime.now()
                        time_remaining = expiry - now
                        minutes_remaining = int(time_remaining.total_seconds() / 60)
                        col2.metric("Time Remaining", f"{minutes_remaining} minutes")
                    
                    # Clean up
                    conn.close()
                else:
                    st.error(f"‚ùå Failed to connect to PostgreSQL: {error}")
                    st.info("""
                    If connection failed, check:
                    1. Vault Secret Operator is properly configured
                    2. Database credentials have been generated
                    3. Kubernetes secrets exist and are properly mounted
                    """)

    with tab2:
        st.header("Credential Rotation Monitor")
        st.markdown("""
        This monitor will continuously check the database connection, 
        showing when credentials are refreshed by Vault Secret Operator.
        """)
        
        # Initialize session state for monitoring
        if 'monitoring' not in st.session_state:
            st.session_state.monitoring = False
        
        col1, col2 = st.columns([1, 3])
        
        with col1:
            if st.button("Start Monitoring" if not st.session_state.monitoring else "Stop Monitoring"):
                st.session_state.monitoring = not st.session_state.monitoring
        
        with col2:
            refresh_rate = st.slider("Refresh Rate (seconds)", 
                                    min_value=1, max_value=30, value=5)
        
        # Create a container for the log
        log_container = st.container()
        
        if st.session_state.monitoring:
            status_placeholder = log_container.empty()
            progress_bar = log_container.progress(0)
            
            # Use a placeholder to update the connection status
            while st.session_state.monitoring:
                conn, error = get_connection()
                
                current_time = time.strftime("%H:%M:%S")
                
                if conn:
                    # Get user and expiration details
                    cur = conn.cursor()
                    cur.execute("SELECT current_user;")
                    user = cur.fetchone()[0]
                    
                    cur.execute("SELECT rolvaliduntil FROM pg_roles WHERE rolname = current_user;")
                    expiry_result = cur.fetchone()
                    
                    expiry_info = ""
                    if expiry_result and expiry_result[0]:
                        expiry = expiry_result[0]
                        expiry_info = f" (expires {expiry.strftime('%H:%M:%S')})"
                    
                    status_placeholder.success(f"‚úÖ Connection successful at {current_time} - User: {user}{expiry_info}")
                    conn.close()
                else:
                    status_placeholder.error(f"‚ùå Connection failed at {current_time}: {error}")
                
                # Update progress bar
                for i in range(refresh_rate * 10):
                    progress_bar.progress((i + 1) / (refresh_rate * 10))
                    time.sleep(0.1)
                
                # Reset progress
                progress_bar.progress(0)

    # Sidebar information section
    st.sidebar.subheader("About This Demo")
    st.sidebar.markdown("""
    This application demonstrates:

    1. **Dynamic Credentials**: Generated by Vault
    2. **Automatic Rotation**: Managed by Vault Secret Operator
    3. **Kubernetes Integration**: Credentials injected as K8s secrets

    The credentials typically expire after a set TTL (Time To Live),
    and new credentials are automatically generated before expiration.
    """)

    # Footer
    st.markdown("---")
    st.caption("HashiCorp Vault + Kubernetes + PostgreSQL Integration Demo")
---
# Deployment for the application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: acme-demo
  namespace: acme-demo
  labels:
    app: acme-demo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: acme-demo
  template:
    metadata:
      labels:
        app: acme-demo
    spec:
      serviceAccountName: acme-demo-sa
      containers:
      - name: acme-demo
        image: amancevice/pandas:1.3.0-slim
        ports:
        - containerPort: 8501
        command: ["/bin/bash", "-c"]
        args:
        - |
          apt-get update && apt-get install -y \
            libpq-dev \
            python3-dev \
            gcc
          pip install streamlit psycopg2-binary
          cd /app
          streamlit run app.py --server.address=0.0.0.0 --server.port=8501
        env:
        - name: POSTGRES_HOST
          value: "acme-postgresql.cdci8e64uqvc.us-west-2.rds.amazonaws.com"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "acmedemo"
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.2"
            memory: "256Mi"
      volumes:
      - name: app-code
        configMap:
          name: acme-demo-code
---
# Service to expose the application
apiVersion: v1
kind: Service
metadata:
  name: acme-demo-service
  namespace: acme-demo
spec:
  selector:
    app: acme-demo
  ports:
  - port: 80
    targetPort: 8501
    protocol: TCP
  type: ClusterIP